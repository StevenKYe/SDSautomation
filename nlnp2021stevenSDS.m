function out = model
%
% nlnp2021stevenSDS.m
%
% Model exported on Oct 29 2021, 14:16 by COMSOL 5.6.0.280.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('C:\Users\YeK\OneDrive - University of Twente\working\siliconNitrideSimulation(O)\SDSautomation(matlab)\SDSautomationNo3changeWidth');

model.label('nlnp2021stevenSDS(changeWidth).mph');

model.param.set('lambda_pump', '1550 [nm]');
model.param.set('freq_pump', 'c_const/lambda_pump');
model.param.set('freq_acous', '13.62 [GHz]');
model.param.set('freq_stokes', 'freq_pump - freq_acous');
model.param.group.create('par2');
model.param('par2').set('angle_etch', ['82[' native2unicode(hex2dec({'00' 'b0'}), 'unicode') ']'], 'etching angle');
model.param('par2').set('t_g1', '180 [nm]', 'bottom stripe thickness');
model.param('par2').set('t_g2', '180 [nm]', 'upper stripe thickness');
model.param('par2').set('t_int', '450 [nm]', 'intermediate layer thickness');
model.param('par2').set('w', '3900 [nm]', 'waveguide width');
model.param('par2').set('t_c', '8 [um]', 'top cladding thickness');
model.param('par2').set('t_b', '8 [um]', 'bottom cladding thickness');
model.param('par2').set('w_model', '12 [um]', 'width of the calculation area');
model.param('par2').set('mesh_size', '50 [nm]', 'mesh size');
model.param('par2').set('t_subs', '1000 [nm]', 'substrate thickness');
model.param('par2').set('PML', '1000 [nm]', 'PML thickness');
model.param('par2').set('t_intup', '630 [nm]');
model.param('par2').set('t_intdown', 't_int - t_intup');
model.param.label('frequency parameters');
model.param('par2').label('geometry parameters');

model.component.create('comp1', true);

model.component('comp1').geom.create('geom1', 2);

model.component.create('comp2', true);

model.component('comp2').geom.create('geom2', 2);

model.component('comp1').label('optics');
model.component('comp2').label('acoustics');

model.result.table.create('evl2', 'Table');
model.result.evaluationGroup.create('eg1', 'EvaluationGroup');
model.result.evaluationGroup('eg1').create('gev1', 'EvalGlobal');

model.component('comp1').mesh.create('mesh1');
model.component('comp2').mesh.create('mesh2');

model.component('comp1').geom('geom1').lengthUnit('nm');
model.component('comp1').geom('geom1').create('pol1', 'Polygon');
model.component('comp1').geom('geom1').feature('pol1').label('upper stripe');
model.component('comp1').geom('geom1').feature('pol1').set('source', 'table');
model.component('comp1').geom('geom1').feature('pol1').set('table', {'-w/2' 't_intup + t_g2'; 'w/2' 't_intup + t_g2'; 'w/2 + t_g2 / tan(angle_etch)' 't_intup'; '-w/2 - t_g2 / tan(angle_etch)' 't_intup'});
model.component('comp1').geom('geom1').create('pol2', 'Polygon');
model.component('comp1').geom('geom1').feature('pol2').label('bottom stripe');
model.component('comp1').geom('geom1').feature('pol2').set('source', 'table');
model.component('comp1').geom('geom1').feature('pol2').set('table', {'-w/2 - (t_g2 + t_int) / tan(angle_etch)' '- t_intdown'; 'w/2 + (t_g2 + t_int) / tan(angle_etch)' '- t_intdown'; 'w/2 + (t_g2 + t_int + t_g1) / tan(angle_etch)' '- t_intdown - t_g1'; '-w/2 - (t_g2 + t_int + t_g1) / tan(angle_etch)' '- t_intdown - t_g1'});
model.component('comp1').geom('geom1').create('r1', 'Rectangle');
model.component('comp1').geom('geom1').feature('r1').active(false);
model.component('comp1').geom('geom1').feature('r1').label('top cladding');
model.component('comp1').geom('geom1').feature('r1').set('pos', {'-w_model/2' '0'});
model.component('comp1').geom('geom1').feature('r1').set('size', {'w_model' 't_c'});
model.component('comp1').geom('geom1').create('r2', 'Rectangle');
model.component('comp1').geom('geom1').feature('r2').label('bottom cladding');
model.component('comp1').geom('geom1').feature('r2').set('pos', {'-w_model/2' '- t_b'});
model.component('comp1').geom('geom1').feature('r2').set('size', {'w_model' 't_b + t_c'});
model.component('comp1').geom('geom1').create('r3', 'Rectangle');
model.component('comp1').geom('geom1').feature('r3').label('substrate');
model.component('comp1').geom('geom1').feature('r3').set('pos', {'-w_model/2' '- t_b - t_subs'});
model.component('comp1').geom('geom1').feature('r3').set('size', {'w_model' 't_subs'});
model.component('comp1').geom('geom1').run;
model.component('comp1').geom('geom1').run('fin');
model.component('comp2').geom('geom2').lengthUnit('nm');
model.component('comp2').geom('geom2').create('pol1', 'Polygon');
model.component('comp2').geom('geom2').feature('pol1').label('upper stripe');
model.component('comp2').geom('geom2').feature('pol1').set('source', 'table');
model.component('comp2').geom('geom2').feature('pol1').set('table', {'-w/2' 't_intup + t_g2'; 'w/2' 't_intup + t_g2'; 'w/2 + t_g2 / tan(angle_etch)' 't_intup'; '-w/2 - t_g2 / tan(angle_etch)' 't_intup'});
model.component('comp2').geom('geom2').create('pol2', 'Polygon');
model.component('comp2').geom('geom2').feature('pol2').label('bottom stripe');
model.component('comp2').geom('geom2').feature('pol2').set('source', 'table');
model.component('comp2').geom('geom2').feature('pol2').set('table', {'-w/2 - (t_g2 + t_int) / tan(angle_etch)' '- t_intdown'; 'w/2 + (t_g2 + t_int) / tan(angle_etch)' '- t_intdown'; 'w/2 + (t_g2 + t_int + t_g1) / tan(angle_etch)' '- t_intdown - t_g1'; '-w/2 - (t_g2 + t_int + t_g1) / tan(angle_etch)' '- t_intdown - t_g1'});
model.component('comp2').geom('geom2').create('r1', 'Rectangle');
model.component('comp2').geom('geom2').feature('r1').active(false);
model.component('comp2').geom('geom2').feature('r1').label('top cladding');
model.component('comp2').geom('geom2').feature('r1').set('pos', {'-w_model/2' '0'});
model.component('comp2').geom('geom2').feature('r1').set('size', {'w_model' 't_c'});
model.component('comp2').geom('geom2').create('r2', 'Rectangle');
model.component('comp2').geom('geom2').feature('r2').label('bottom cladding');
model.component('comp2').geom('geom2').feature('r2').set('pos', {'-w_model/2' '- t_b'});
model.component('comp2').geom('geom2').feature('r2').set('size', {'w_model' 't_b + t_c'});
model.component('comp2').geom('geom2').create('r3', 'Rectangle');
model.component('comp2').geom('geom2').feature('r3').label('substrate');
model.component('comp2').geom('geom2').feature('r3').set('pos', {'-w_model/2' '- t_b - t_subs'});
model.component('comp2').geom('geom2').feature('r3').set('size', {'w_model' 't_subs'});
model.component('comp2').geom('geom2').create('r4', 'Rectangle');
model.component('comp2').geom('geom2').feature('r4').label('PML1');
model.component('comp2').geom('geom2').feature('r4').set('pos', {'-w_model/2 - PML' '- t_b'});
model.component('comp2').geom('geom2').feature('r4').set('size', {'w_model + 2 * PML' 't_b + t_c'});
model.component('comp2').geom('geom2').create('r5', 'Rectangle');
model.component('comp2').geom('geom2').feature('r5').label('PML2');
model.component('comp2').geom('geom2').feature('r5').set('pos', {'-w_model/2 - PML' '- t_b - t_subs'});
model.component('comp2').geom('geom2').feature('r5').set('size', {'w_model + 2 * PML' 't_subs'});
model.component('comp2').geom('geom2').create('r6', 'Rectangle');
model.component('comp2').geom('geom2').feature('r6').label('PML3');
model.component('comp2').geom('geom2').feature('r6').set('pos', {'-w_model/2 - PML' '- t_b - t_subs - PML'});
model.component('comp2').geom('geom2').feature('r6').set('size', {'w_model + 2 * PML' 'PML'});
model.component('comp2').geom('geom2').create('r7', 'Rectangle');
model.component('comp2').geom('geom2').feature('r7').label('PML4');
model.component('comp2').geom('geom2').feature('r7').set('pos', {'-w_model/2' '- t_b - t_subs - PML'});
model.component('comp2').geom('geom2').feature('r7').set('size', {'w_model' 'PML'});
model.component('comp2').geom('geom2').create('r8', 'Rectangle');
model.component('comp2').geom('geom2').feature('r8').label('integration area');
model.component('comp2').geom('geom2').feature('r8').set('pos', {'-0.5 * w_model' '-4 * (t_int + t_g1 + t_g2) -225 [nm] + t_intup'});
model.component('comp2').geom('geom2').feature('r8').set('size', {'w_model' '8 * (t_int + t_g1 + t_g2)'});
model.component('comp2').geom('geom2').run;
model.component('comp2').geom('geom2').run('fin');

model.component('comp1').variable.create('var1');
model.component('comp1').variable('var1').set('p11', '0');
model.component('comp1').variable('var1').set('p12', '0.047');
model.component('comp1').variable('var1').set('p44', '-0.047/2');
model.component('comp1').variable('var1').selection.geom('geom1', 2);
model.component('comp1').variable('var1').selection.set([3 4]);
model.component('comp1').variable.create('var2');
model.component('comp1').variable('var2').set('p11', '0.121');
model.component('comp1').variable('var2').set('p12', '0.27');
model.component('comp1').variable('var2').set('p44', '-0.075');
model.component('comp1').variable('var2').selection.geom('geom1', 2);
model.component('comp1').variable('var2').selection.set([2]);
model.component('comp1').variable.create('var3');
model.component('comp1').variable('var3').set('p11', '-0.094');
model.component('comp1').variable('var3').set('p12', '0.017');
model.component('comp1').variable('var3').set('p44', '-0.051');
model.component('comp1').variable('var3').selection.geom('geom1', 2);
model.component('comp1').variable('var3').selection.set([1]);
model.component('comp1').variable.create('var4');
model.component('comp1').variable('var4').set('nseff', 'withsol(''sol1'', comp1.ewfd.neff)', 'Effective mode index');
model.component('comp1').variable('var4').set('ksz', 'withsol(''sol1'', comp1.ewfd.k0) * nseff', 'Out-of-plane wave number');
model.component('comp1').variable('var4').set('npeff', 'withsol(''sol2'', comp1.ewfd.neff)', 'Effective mode index');
model.component('comp1').variable('var4').set('kpz', 'withsol(''sol2'', comp1.ewfd.k0) * npeff', 'Out-of-plane wave number');
model.component('comp1').variable('var4').set('k_acous', 'kpz + ksz');
model.component('comp1').variable('var4').set('Aeffp', 'intall(normEp^2)^2 / intall(normEp^4)');
model.component('comp1').variable('var4').set('Aeffs', 'intall(normEs^2)^2 / intall(normEs^4)');
model.component('comp1').variable('var4').set('p_s', 'withsol(''sol1'', intall(ewfd.Poavz))');
model.component('comp1').variable('var4').set('p_p', 'withsol(''sol2'', intall(ewfd.Poavz))');
model.component('comp1').variable('var4').set('I_s', '0.5*c_const*epsilon0_const*n_mat*normEs^2/p_s', 'power-normalized intensity field');
model.component('comp1').variable('var4').set('I_p', '0.5*c_const*epsilon0_const*n_mat*normEp^2/p_p', 'power-normalized intensity field');
model.component('comp1').variable('var4').set('E_n', 'normEs/maxop1(normEs)', 'normalized electric field');
model.component('comp1').variable.create('var5');
model.component('comp1').variable('var5').set('Esx', 'conj(withsol(''sol1'', comp1.ewfd.Ex))');
model.component('comp1').variable('var5').set('Esy', 'conj(withsol(''sol1'', comp1.ewfd.Ey))');
model.component('comp1').variable('var5').set('Esz', 'conj(withsol(''sol1'', comp1.ewfd.Ez))');
model.component('comp1').variable('var5').set('Dsx', 'conj(withsol(''sol1'', comp1.ewfd.Dx))');
model.component('comp1').variable('var5').set('Dsy', 'conj(withsol(''sol1'', comp1.ewfd.Dy))');
model.component('comp1').variable('var5').set('Dsz', 'conj(withsol(''sol1'', comp1.ewfd.Dz))');
model.component('comp1').variable('var5').set('Bsx', 'conj(withsol(''sol1'', comp1.ewfd.Bx))');
model.component('comp1').variable('var5').set('Bsy', 'conj(withsol(''sol1'', comp1.ewfd.By))');
model.component('comp1').variable('var5').set('Bsz', 'conj(withsol(''sol1'', comp1.ewfd.Bz))');
model.component('comp1').variable('var5').set('Hsx', 'conj(withsol(''sol1'', comp1.ewfd.Hx))');
model.component('comp1').variable('var5').set('Hsy', 'conj(withsol(''sol1'', comp1.ewfd.Hy))');
model.component('comp1').variable('var5').set('Hsz', 'conj(withsol(''sol1'', comp1.ewfd.Hz))');
model.component('comp1').variable('var5').set('normEs', 'conj(withsol(''sol1'', comp1.ewfd.normE))');
model.component('comp1').variable.create('var6');
model.component('comp1').variable('var6').set('Epx', 'withsol(''sol2'', comp1.ewfd.Ex)');
model.component('comp1').variable('var6').set('Epy', 'withsol(''sol2'', comp1.ewfd.Ey)');
model.component('comp1').variable('var6').set('Epz', 'withsol(''sol2'', comp1.ewfd.Ez)');
model.component('comp1').variable('var6').set('Dpx', 'withsol(''sol2'', comp1.ewfd.Dx)');
model.component('comp1').variable('var6').set('Dpy', 'withsol(''sol2'', comp1.ewfd.Dy)');
model.component('comp1').variable('var6').set('Dpz', 'withsol(''sol2'', comp1.ewfd.Dz)');
model.component('comp1').variable('var6').set('Bpx', 'withsol(''sol2'', comp1.ewfd.Bx)');
model.component('comp1').variable('var6').set('Bpy', 'withsol(''sol2'', comp1.ewfd.By)');
model.component('comp1').variable('var6').set('Bpz', 'withsol(''sol2'', comp1.ewfd.Bz)');
model.component('comp1').variable('var6').set('Hpx', 'withsol(''sol2'', comp1.ewfd.Hx)');
model.component('comp1').variable('var6').set('Hpy', 'withsol(''sol2'', comp1.ewfd.Hy)');
model.component('comp1').variable('var6').set('Hpz', 'withsol(''sol2'', comp1.ewfd.Hz)');
model.component('comp1').variable('var6').set('normEp', 'withsol(''sol2'', comp1.ewfd.normE)');
model.component('comp1').variable('var6').set('EdotD', 'Epx*conj(Dsx) + Epy*conj(Dsy) + Epz*conj(Dsz)');
model.component('comp1').variable('var6').set('BdotH', 'Bpx*conj(Hsx) + Bpy*conj(Hsy) + Bpz*conj(Hsz)');
model.component('comp1').variable.create('var8');
model.component('comp1').variable('var8').set('n_mat', 'ewfd.nxx');
model.component('comp1').variable('var8').set('sigma_xx', '-0.5*root.epsilon0_const*n_mat^4*real(p11*Epx*conj(Esx) + p12*(Epy*conj(Esy) + Epz*conj(Esz)))');
model.component('comp1').variable('var8').set('sigma_yy', '-0.5*root.epsilon0_const*n_mat^4*real(p11*Epy*conj(Esy) + p12*(Epx*conj(Esx) + Epz*conj(Esz)))');
model.component('comp1').variable('var8').set('sigma_zz', '-0.5*root.epsilon0_const*n_mat^4*real(p11*Epz*conj(Esz) + p12*(Epx*conj(Esx) + Epy*conj(Esy)))');
model.component('comp1').variable('var8').set('sigma_xy', '-0.5*root.epsilon0_const*n_mat^4*real((Epx*conj(Esy) + Esx*conj(Epy))*p44)');
model.component('comp1').variable('var8').set('sigma_xz', '-0.5*root.epsilon0_const*n_mat^4*real((Epx*conj(Esz) + Esx*conj(Epz))*p44)');
model.component('comp1').variable('var8').set('sigma_yz', '-0.5*root.epsilon0_const*n_mat^4*real((Epy*conj(Esz) + Esy*conj(Epz))*p44)');
model.component('comp1').variable.create('var9');
model.component('comp1').variable('var9').set('f_x', '-d(sigma_xx, x) - d(sigma_xy,y) - i*k_acous*sigma_xz');
model.component('comp1').variable('var9').set('f_y', '-d(sigma_xy, x) - d(sigma_yy,y) - i*k_acous*sigma_yz');
model.component('comp1').variable('var9').set('f_z', '-d(sigma_xz, x) - d(sigma_yz,y) - i*k_acous*sigma_zz');
model.component('comp1').variable('var9').selection.geom('geom1', 2);
model.component('comp1').variable('var9').selection.set([2 3 4]);
model.component('comp2').variable.create('var14');
model.component('comp2').variable('var14').set('acous_xx', 'withsol(''sol1'', comp1.linext1(comp1.sigma_xx))');
model.component('comp2').variable('var14').set('acous_yy', 'withsol(''sol1'', comp1.linext1(comp1.sigma_yy))');
model.component('comp2').variable('var14').set('acous_zz', 'withsol(''sol1'', comp1.linext1(comp1.sigma_zz))');
model.component('comp2').variable('var14').set('acous_xy', 'withsol(''sol1'', comp1.linext1(comp1.sigma_xy))');
model.component('comp2').variable('var14').set('acous_xz', 'withsol(''sol1'', comp1.linext1(comp1.sigma_xz))');
model.component('comp2').variable('var14').set('acous_yz', 'withsol(''sol1'', comp1.linext1(comp1.sigma_yz))');
model.component('comp2').variable('var14').selection.geom('geom2', 2);
model.component('comp2').variable('var14').selection.set([6 7 8 9 10]);
model.component('comp2').variable.create('var15');
model.component('comp2').variable('var15').set('f_x', 'withsol(''sol1'', comp1.linext1(comp1.f_x))');
model.component('comp2').variable('var15').set('f_y', 'withsol(''sol1'', comp1.linext1(comp1.f_y))');
model.component('comp2').variable('var15').set('f_z', 'withsol(''sol1'', comp1.linext1(comp1.f_z))');
model.component('comp2').variable('var15').selection.geom('geom2', 2);
model.component('comp2').variable('var15').selection.set([6 7 8 9 10]);
model.component('comp2').variable.create('var17');
model.component('comp2').variable('var17').set('p_p', 'withsol(''sol1'', comp1.p_p)');
model.component('comp2').variable('var17').set('p_s', 'withsol(''sol1'', comp1.p_s)');
model.component('comp2').variable('var17').set('factor', '0.5 * freq_stokes / (freq_acous * p_p * p_s)');
model.component('comp2').variable('var17').set('overlap_x', 'real(f_x * conj(solid.u_tX))');
model.component('comp2').variable('var17').set('overlap_y', 'real(f_y * conj(solid.u_tY))');
model.component('comp2').variable('var17').set('overlap_z', 'real(f_z * conj(solid.u_tZ))');
model.component('comp2').variable('var17').set('SBSgain', 'factor * overlap');
model.component('comp2').variable('var17').set('overlap', 'intcenter(overlap_x + overlap_y + overlap_z)');
model.component('comp2').variable('var17').set('E_n', 'withsol(''sol1'', comp1.linext1(comp1.E_n))', 'normalized electric field');
model.component('comp2').variable('var17').set('acous_n', 'solid.disp/maxop2(solid.disp)', 'normalized acoustic field');
model.component('comp2').variable('var17').set('overlapField', 'intall(E_n^2 * acous_n)^2 / (intall(E_n^2) * intall(acous_n^2))');

model.component('comp1').material.create('mat1', 'Common');
model.component('comp1').material.create('mat2', 'Common');
model.component('comp2').material.create('mat4', 'Common');
model.component('comp2').material.create('mat5', 'Common');
model.component('comp2').material.create('matlnk1', 'Link');
model.material.create('mat7', 'Common', '');
model.component('comp1').material.create('matlnk2', 'Link');
model.component('comp1').material('mat1').selection.set([3 4]);
model.component('comp1').material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.component('comp1').material('mat2').selection.set([2]);
model.component('comp1').material('mat2').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.component('comp2').material('mat4').selection.set([9 10]);
model.component('comp2').material('mat5').selection.set([3 6 7 8 13]);
model.component('comp2').material('matlnk1').selection.set([1 2 4 5 11 12]);
model.material('mat7').propertyGroup.create('Anisotropic', 'Anisotropic');
model.material('mat7').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.component('comp1').material('matlnk2').selection.set([1]);

model.component('comp1').cpl.create('intop1', 'Integration');
model.component('comp1').cpl.create('linext1', 'LinearExtrusion');
model.component('comp2').cpl.create('intop3', 'Integration');
model.component('comp1').cpl.create('maxop1', 'Maximum');
model.component('comp2').cpl.create('maxop2', 'Maximum');
model.component('comp2').cpl.create('intop4', 'Integration');
model.component('comp1').cpl('intop1').selection.all;
model.component('comp1').cpl('linext1').selection.all;
model.component('comp2').cpl('intop3').selection.set([7 9 10]);
model.component('comp1').cpl('maxop1').selection.set([2 3 4]);
model.component('comp2').cpl('maxop2').selection.set([7 8 9 10]);
model.component('comp2').cpl('intop4').selection.set([5 6 7 8 9 10]);

model.component('comp2').coordSystem.create('pml1', 'PML');
model.component('comp2').coordSystem('pml1').selection.set([1 2 3 4 11 12 13]);

model.component('comp1').physics.create('ewfd', 'ElectromagneticWavesFrequencyDomain', 'geom1');
model.component('comp2').physics.create('solid', 'SolidMechanics', 'geom2');
model.component('comp2').physics('solid').feature('lemm1').create('exs1', 'ExternalStress', 2);
model.component('comp2').physics('solid').feature('lemm1').feature('exs1').selection.set([6 7 8 9 10]);
model.component('comp2').physics('solid').feature('lemm1').create('dmp1', 'Damping', 2);
model.component('comp2').physics('solid').create('lemm2', 'LinearElasticModel', 2);
model.component('comp2').physics('solid').feature('lemm2').selection.set([1 2 4 5 11 12]);

model.component('comp1').mesh('mesh1').create('ftri1', 'FreeTri');
model.component('comp1').mesh('mesh1').feature('ftri1').selection.geom('geom1', 2);
model.component('comp1').mesh('mesh1').feature('ftri1').selection.set([1 2 3 4]);
model.component('comp1').mesh('mesh1').feature('ftri1').create('size1', 'Size');
model.component('comp1').mesh('mesh1').feature('ftri1').create('size2', 'Size');
model.component('comp1').mesh('mesh1').feature('ftri1').feature('size1').selection.set([3 4]);
model.component('comp1').mesh('mesh1').feature('ftri1').feature('size2').selection.set([1 2]);
model.component('comp2').mesh('mesh2').create('map1', 'Map');
model.component('comp2').mesh('mesh2').create('ftri1', 'FreeTri');
model.component('comp2').mesh('mesh2').feature('map1').selection.geom('geom2', 2);
model.component('comp2').mesh('mesh2').feature('map1').selection.set([1 2 3 4 11 12 13]);
model.component('comp2').mesh('mesh2').feature('map1').create('size1', 'Size');
model.component('comp2').mesh('mesh2').feature('ftri1').selection.geom('geom2', 2);
model.component('comp2').mesh('mesh2').feature('ftri1').selection.set([5 6 7 8 9 10]);
model.component('comp2').mesh('mesh2').feature('ftri1').create('size1', 'Size');
model.component('comp2').mesh('mesh2').feature('ftri1').create('size2', 'Size');
model.component('comp2').mesh('mesh2').feature('ftri1').feature('size1').selection.set([5 6 7 8]);
model.component('comp2').mesh('mesh2').feature('ftri1').feature('size2').selection.set([9 10]);

model.result.table('evl2').label('Evaluation 2D');
model.result.table('evl2').comments('Interactive 2D values');

model.component('comp1').variable('var1').label('photoelastic(nitride)');
model.component('comp1').variable('var2').label('photoelastic(silica)');
model.component('comp1').variable('var3').label('photoelastic(silicon)');
model.component('comp1').variable('var4').label('opticalParas');
model.component('comp1').variable('var5').label('fields(stokes)');
model.component('comp1').variable('var6').label('fields(pump)');
model.component('comp1').variable('var8').label('electrostrictiveStressTensor');
model.component('comp1').variable('var9').label('force');
model.component('comp2').variable('var14').label('stress tensor');
model.component('comp2').variable('var15').label('bulk force');
model.component('comp2').variable('var17').label('SBSgain');

model.component('comp1').view('view1').axis.set('xmin', -10784.375);
model.component('comp1').view('view1').axis.set('xmax', 10784.375);
model.component('comp1').view('view1').axis.set('ymin', -9544.53125);
model.component('comp1').view('view1').axis.set('ymax', 8544.53125);
model.component('comp2').view('view2').axis.set('xmin', -13677.412109375);
model.component('comp2').view('view2').axis.set('xmax', 13677.10546875);
model.component('comp2').view('view2').axis.set('ymin', -10932.8115234375);
model.component('comp2').view('view2').axis.set('ymax', 9583.0771484375);

model.component('comp1').material('mat1').label('nitride');
model.component('comp1').material('mat1').propertyGroup('RefractiveIndex').set('n', '');
model.component('comp1').material('mat1').propertyGroup('RefractiveIndex').set('ki', '');
model.component('comp1').material('mat1').propertyGroup('RefractiveIndex').set('n', {'1.98' '0' '0' '0' '1.98' '0' '0' '0' '1.98'});
model.component('comp1').material('mat1').propertyGroup('RefractiveIndex').set('ki', {'0' '0' '0' '0' '0' '0' '0' '0' '0'});
model.component('comp1').material('mat2').label('silica');
model.component('comp1').material('mat2').propertyGroup('RefractiveIndex').set('n', '');
model.component('comp1').material('mat2').propertyGroup('RefractiveIndex').set('ki', '');
model.component('comp1').material('mat2').propertyGroup('RefractiveIndex').set('n', {'1.45' '0' '0' '0' '1.45' '0' '0' '0' '1.45'});
model.component('comp1').material('mat2').propertyGroup('RefractiveIndex').set('ki', {'0' '0' '0' '0' '0' '0' '0' '0' '0'});
model.component('comp2').material('mat4').label('nitride');
model.component('comp2').material('mat4').propertyGroup('def').set('youngsmodulus', '201E9');
model.component('comp2').material('mat4').propertyGroup('def').set('poissonsratio', '0.23');
model.component('comp2').material('mat4').propertyGroup('def').set('density', '3020');
model.component('comp2').material('mat5').label('silica');
model.component('comp2').material('mat5').propertyGroup('def').set('youngsmodulus', '74E9');
model.component('comp2').material('mat5').propertyGroup('def').set('poissonsratio', '0.17');
model.component('comp2').material('mat5').propertyGroup('def').set('density', '2240');
model.component('comp2').material('matlnk1').label('silicon');
model.component('comp2').material('matlnk1').set('link', 'mat7');
model.material('mat7').label('silicon 1');
model.material('mat7').set('family', 'custom');
model.material('mat7').set('customspecular', [0.7843137254901961 1 1]);
model.material('mat7').set('diffuse', 'custom');
model.material('mat7').set('customdiffuse', [0.6666666666666666 0.6666666666666666 0.7058823529411765]);
model.material('mat7').set('customambient', [0.6666666666666666 0.6666666666666666 0.7058823529411765]);
model.material('mat7').set('fresnel', 0.7);
model.material('mat7').set('roughness', 0.5);
model.material('mat7').set('metallic', 0);
model.material('mat7').set('pearl', 0);
model.material('mat7').set('diffusewrap', 0);
model.material('mat7').set('clearcoat', 0);
model.material('mat7').propertyGroup('def').set('density', '2330[kg/m^3]');
model.material('mat7').propertyGroup('Anisotropic').set('D', '');
model.material('mat7').propertyGroup('Anisotropic').set('eta_D', '');
model.material('mat7').propertyGroup('Anisotropic').set('D', '');
model.material('mat7').propertyGroup('Anisotropic').set('eta_D', '');
model.material('mat7').propertyGroup('Anisotropic').set('D', '');
model.material('mat7').propertyGroup('Anisotropic').set('eta_D', '');
model.material('mat7').propertyGroup('Anisotropic').set('D', {'166[GPa]' '64[GPa]' '64[GPa]' '0[GPa]' '0[GPa]' '0[GPa]' '64[GPa]' '166[GPa]' '64[GPa]' '0[GPa]'  ...
'0[GPa]' '0[GPa]' '64[GPa]' '64[GPa]' '166[GPa]' '0[GPa]' '0[GPa]' '0[GPa]' '0[GPa]' '0[GPa]'  ...
'0[GPa]' '80[GPa]' '0[GPa]' '0[GPa]' '0[GPa]' '0[GPa]' '0[GPa]' '0[GPa]' '80[GPa]' '0[GPa]'  ...
'0[GPa]' '0[GPa]' '0[GPa]' '0[GPa]' '0[GPa]' '80[GPa]'});
model.material('mat7').propertyGroup('Anisotropic').set('eta_D', {'0' '0' '0' '0' '0' '0' '0' '0' '0' '0'  ...
'0' '0' '0' '0' '0' '0' '0' '0' '0' '0'  ...
'0' '0' '0' '0' '0' '0' '0' '0' '0' '0'  ...
'0' '0' '0' '0' '0' '0'});
model.material('mat7').propertyGroup('RefractiveIndex').set('n', '');
model.material('mat7').propertyGroup('RefractiveIndex').set('ki', '');
model.material('mat7').propertyGroup('RefractiveIndex').set('n', {'1.45' '0' '0' '0' '1.45' '0' '0' '0' '1.45'});
model.material('mat7').propertyGroup('RefractiveIndex').set('ki', {'0' '0' '0' '0' '0' '0' '0' '0' '0'});
model.component('comp1').material('matlnk2').label('silicon');

model.component('comp1').cpl('intop1').label('Integration (all)');
model.component('comp1').cpl('intop1').set('opname', 'intall');
model.component('comp1').cpl('linext1').set('dstgeom', 'geom2');
model.component('comp1').cpl('linext1').selection('srcvertex1').set([3]);
model.component('comp1').cpl('linext1').selection('srcvertex2').set([14]);
model.component('comp1').cpl('linext1').selection('srcvertex3').set([13]);
model.component('comp1').cpl('linext1').selection('dstvertex1').set([10]);
model.component('comp1').cpl('linext1').selection('dstvertex2').set([24]);
model.component('comp1').cpl('linext1').selection('dstvertex3').set([21]);
model.component('comp2').cpl('intop3').label('Integration (center)');
model.component('comp2').cpl('intop3').set('opname', 'intcenter');
model.component('comp2').cpl('intop4').label('Integration (all)');
model.component('comp2').cpl('intop4').set('opname', 'intall');

model.component('comp1').physics('ewfd').feature('wee1').set('minput_frequency_src', 'userdef');
model.component('comp1').physics('ewfd').feature('wee1').set('minput_frequency', 'root.freq');
model.component('comp1').physics('ewfd').feature('wee1').set('editModelInputs', true);
model.component('comp2').physics('solid').prop('Type2D').set('ModeExtension', true);
model.component('comp2').physics('solid').prop('Type2D').set('kz', 'withsol(''sol1'', comp1.k_acous)');
model.component('comp2').physics('solid').prop('d').set('d', '1000 * 2 * pi / withsol(''sol1'', comp1.k_acous)');
model.component('comp2').physics('solid').feature('lemm1').feature('exs1').set('Sext', {'acous_xx'; 'acous_xy'; 'acous_xz'; 'acous_xy'; 'acous_yy'; 'acous_yz'; 'acous_xz'; 'acous_yz'; 'acous_zz'});
model.component('comp2').physics('solid').feature('lemm1').feature('dmp1').set('DampingType', 'ViscousDamping');
model.component('comp2').physics('solid').feature('lemm1').feature('dmp1').set('etab', '1.6e-3');
model.component('comp2').physics('solid').feature('lemm1').feature('dmp1').set('etav', '0.16e-3');
model.component('comp2').physics('solid').feature('lemm2').set('SolidModel', 'Anisotropic');

model.component('comp1').mesh('mesh1').feature('size').set('hauto', 4);
model.component('comp1').mesh('mesh1').feature('size').set('custom', 'on');
model.component('comp1').mesh('mesh1').feature('size').set('hmax', 2000);
model.component('comp1').mesh('mesh1').feature('size').set('hmin', 3);
model.component('comp1').mesh('mesh1').feature('ftri1').set('smoothmaxiter', 8);
model.component('comp1').mesh('mesh1').feature('ftri1').set('smoothmaxdepth', 8);
model.component('comp1').mesh('mesh1').feature('ftri1').feature('size1').set('hauto', 2);
model.component('comp1').mesh('mesh1').feature('ftri1').feature('size1').set('custom', 'on');
model.component('comp1').mesh('mesh1').feature('ftri1').feature('size1').set('hmax', 'mesh_size');
model.component('comp1').mesh('mesh1').feature('ftri1').feature('size1').set('hmaxactive', true);
model.component('comp1').mesh('mesh1').feature('ftri1').feature('size1').set('hmin', 1.87);
model.component('comp1').mesh('mesh1').feature('ftri1').feature('size1').set('hminactive', false);
model.component('comp1').mesh('mesh1').feature('ftri1').feature('size2').set('hauto', 3);
model.component('comp1').mesh('mesh1').feature('ftri1').feature('size2').set('custom', 'on');
model.component('comp1').mesh('mesh1').feature('ftri1').feature('size2').set('hmax', 'mesh_size*10');
model.component('comp1').mesh('mesh1').feature('ftri1').feature('size2').set('hmaxactive', true);
model.component('comp1').mesh('mesh1').feature('ftri1').feature('size2').set('hmin', 2.19);
model.component('comp1').mesh('mesh1').feature('ftri1').feature('size2').set('hminactive', false);
model.component('comp1').mesh('mesh1').run;
model.component('comp2').mesh('mesh2').feature('map1').set('smoothmaxiter', 8);
model.component('comp2').mesh('mesh2').feature('map1').set('smoothmaxdepth', 8);
model.component('comp2').mesh('mesh2').feature('map1').feature('size1').set('custom', 'on');
model.component('comp2').mesh('mesh2').feature('map1').feature('size1').set('hmax', 'mesh_size*2');
model.component('comp2').mesh('mesh2').feature('map1').feature('size1').set('hmaxactive', true);
model.component('comp2').mesh('mesh2').feature('map1').feature('size1').set('hmin', 7.8);
model.component('comp2').mesh('mesh2').feature('map1').feature('size1').set('hminactive', false);
model.component('comp2').mesh('mesh2').feature('ftri1').set('smoothmaxiter', 8);
model.component('comp2').mesh('mesh2').feature('ftri1').set('smoothmaxdepth', 8);
model.component('comp2').mesh('mesh2').feature('ftri1').feature('size1').set('custom', 'on');
model.component('comp2').mesh('mesh2').feature('ftri1').feature('size1').set('hmax', 'mesh_size*2');
model.component('comp2').mesh('mesh2').feature('ftri1').feature('size1').set('hmaxactive', true);
model.component('comp2').mesh('mesh2').feature('ftri1').feature('size1').set('hmin', 8.1);
model.component('comp2').mesh('mesh2').feature('ftri1').feature('size1').set('hminactive', false);
model.component('comp2').mesh('mesh2').feature('ftri1').feature('size2').set('custom', 'on');
model.component('comp2').mesh('mesh2').feature('ftri1').feature('size2').set('hmax', 'mesh_size');
model.component('comp2').mesh('mesh2').feature('ftri1').feature('size2').set('hmaxactive', true);
model.component('comp2').mesh('mesh2').feature('ftri1').feature('size2').set('hmin', 8.1);
model.component('comp2').mesh('mesh2').feature('ftri1').feature('size2').set('hminactive', false);
model.component('comp2').mesh('mesh2').run;

model.study.create('std1');
model.study('std1').create('mode', 'ModeAnalysis');
model.study('std1').create('mode2', 'ModeAnalysis');
model.study('std1').feature('mode').set('activate', {'ewfd' 'on' 'solid' 'off' 'frame:spatial1' 'on' 'frame:spatial2' 'on' 'frame:material1' 'on'  ...
'frame:material2' 'on'});
model.study('std1').feature('mode2').set('activate', {'ewfd' 'on' 'solid' 'off' 'frame:spatial1' 'on' 'frame:spatial2' 'on' 'frame:material1' 'on'  ...
'frame:material2' 'on'});
model.study.create('std2');
model.study('std2').create('freq', 'Frequency');
model.study('std2').feature('freq').set('activate', {'ewfd' 'off' 'solid' 'on' 'frame:spatial1' 'on' 'frame:spatial2' 'on' 'frame:material1' 'on'  ...
'frame:material2' 'on'});

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').attach('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').create('e1', 'Eigenvalue');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').create('e2', 'Eigenvalue');
model.sol('sol1').feature('e1').create('d1', 'Direct');
model.sol('sol1').feature('e2').create('d1', 'Direct');
model.sol.create('sol3');

model.result.dataset.remove('dset5');
model.result.dataset('dset3').set('solution', 'sol3');
model.result.dataset.remove('dset6');
model.result.dataset('dset4').set('solution', 'sol3');

model.sol('sol3').study('std2');
model.sol('sol3').attach('std2');
model.sol('sol3').create('st1', 'StudyStep');
model.sol('sol3').create('v1', 'Variables');
model.sol('sol3').create('s1', 'Stationary');
model.sol('sol3').feature('s1').create('p1', 'Parametric');
model.sol('sol3').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol3').feature('s1').feature.remove('fcDef');

model.result.create('pg1', 'PlotGroup2D');
model.result.create('pg2', 'PlotGroup2D');
model.result('pg1').create('surf1', 'Surface');
model.result('pg2').set('data', 'dset4');
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', 'solid.mises');
model.result('pg2').feature('surf1').create('def', 'Deform');
model.result.export.create('img1', 'Image');
model.result.export.create('img2', 'Image');

model.study('std1').feature('mode').label('Mode Analysis (pump)');
model.study('std1').feature('mode').set('transform', 'effective_mode_index');
model.study('std1').feature('mode').set('modeFreq', 'freq_pump');
model.study('std1').feature('mode').set('neigsactive', true);
model.study('std1').feature('mode').set('neigs', 1);
model.study('std1').feature('mode').set('eigunit', '');
model.study('std1').feature('mode').set('shift', '1.594');
model.study('std1').feature('mode').set('ngen', 1);
model.study('std1').feature('mode').set('ngenactive', false);
model.study('std1').feature('mode2').label('Mode Analysis (stokes)');
model.study('std1').feature('mode2').set('transform', 'effective_mode_index');
model.study('std1').feature('mode2').set('modeFreq', 'freq_stokes');
model.study('std1').feature('mode2').set('neigsactive', true);
model.study('std1').feature('mode2').set('neigs', 1);
model.study('std1').feature('mode2').set('eigunit', '');
model.study('std1').feature('mode2').set('shift', '1.594');
model.study('std2').feature('freq').set('plist', 'freq_acous');

model.sol('sol1').attach('std1');
model.sol('sol1').feature('st1').label('Compile Equations: Mode Analysis (pump)');
model.sol('sol1').feature('v1').label('Dependent Variables 1.1');
model.sol('sol1').feature('e1').label('Eigenvalue Solver 1.1');
model.sol('sol1').feature('e1').set('transform', 'effective_mode_index');
model.sol('sol1').feature('e1').set('neigs', 1);
model.sol('sol1').feature('e1').set('shift', '1.594');
model.sol('sol1').feature('e1').feature('dDef').label('Direct 2');
model.sol('sol1').feature('e1').feature('aDef').label('Advanced 1');
model.sol('sol1').feature('e1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('e1').feature('d1').label('Suggested Direct Solver (ewfd)');
model.sol('sol1').feature('su1').label('Solution Store 1.1');
model.sol('sol1').feature('st2').label('Compile Equations: Mode Analysis (stokes)');
model.sol('sol1').feature('st2').set('studystep', 'mode2');
model.sol('sol1').feature('v2').label('Dependent Variables 2.1');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('solnum', 'auto');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('e2').label('Eigenvalue Solver 2.1');
model.sol('sol1').feature('e2').set('transform', 'effective_mode_index');
model.sol('sol1').feature('e2').set('neigs', 1);
model.sol('sol1').feature('e2').set('shift', '1.594');
model.sol('sol1').feature('e2').feature('dDef').label('Direct 2');
model.sol('sol1').feature('e2').feature('aDef').label('Advanced 1');
model.sol('sol1').feature('e2').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('e2').feature('d1').label('Suggested Direct Solver (ewfd)');
model.sol('sol1').runAll;
model.sol('sol3').attach('std2');
model.sol('sol3').feature('st1').label('Compile Equations: Frequency Domain');
model.sol('sol3').feature('v1').label('Dependent Variables 1.1');
model.sol('sol3').feature('v1').set('clistctrl', {'p1'});
model.sol('sol3').feature('v1').set('cname', {'freq'});
model.sol('sol3').feature('v1').set('clist', {'freq_acous'});
model.sol('sol3').feature('s1').label('Stationary Solver 1.1');
model.sol('sol3').feature('s1').feature('dDef').label('Direct 1');
model.sol('sol3').feature('s1').feature('dDef').set('maxrefinesteps', 20);
model.sol('sol3').feature('s1').feature('aDef').label('Advanced 1');
model.sol('sol3').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol3').feature('s1').feature('p1').label('Parametric 1.1');
model.sol('sol3').feature('s1').feature('p1').set('control', 'user');
model.sol('sol3').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol3').feature('s1').feature('p1').set('plistarr', {'freq_acous'});
model.sol('sol3').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol3').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol3').feature('s1').feature('p1').set('preusesol', 'auto');
model.sol('sol3').feature('s1').feature('fc1').label('Fully Coupled 1.1');
model.sol('sol3').runAll;

model.result.evaluationGroup('eg1').set('data', 'dset4');
model.result.evaluationGroup('eg1').set('looplevelinput', {'all'});
model.result.evaluationGroup('eg1').feature('gev1').set('expr', {'SBSgain'});
model.result.evaluationGroup('eg1').feature('gev1').set('unit', {'s^3/(kg*m^3)'});
model.result.evaluationGroup('eg1').feature('gev1').set('descr', {''});
model.result.evaluationGroup('eg1').feature('gev1').set('const', {'solid.refpntx' '0' 'Reference point for moment computation, x coordinate'; 'solid.refpnty' '0' 'Reference point for moment computation, y coordinate'; 'solid.refpntz' '0' 'Reference point for moment computation, z coordinate'});
model.result.evaluationGroup('eg1').run;
model.result('pg1').label('Electric Field (ewfd)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').feature('surf1').set('colortable', 'RainbowLight');
model.result('pg1').feature('surf1').set('smooth', 'internal');
model.result('pg1').feature('surf1').set('resolution', 'normal');
model.result('pg2').label('Stress (solid)');
model.result('pg2').feature('surf1').set('const', {'solid.refpntx' '0' 'Reference point for moment computation, x coordinate'; 'solid.refpnty' '0' 'Reference point for moment computation, y coordinate'; 'solid.refpntz' '0' 'Reference point for moment computation, z coordinate'});
model.result('pg2').feature('surf1').set('colortable', 'RainbowLight');
model.result('pg2').feature('surf1').set('resolution', 'normal');
model.result('pg2').feature('surf1').feature('def').set('scale', 1.459105779068534E19);
model.result('pg2').feature('surf1').feature('def').set('scaleactive', false);
model.result.export('img1').set('size', 'manualweb');
model.result.export('img1').set('unit', 'px');
model.result.export('img1').set('height', '480');
model.result.export('img1').set('width', '640');
model.result.export('img1').set('lockratio', 'off');
model.result.export('img1').set('resolution', '96');
model.result.export('img1').set('antialias', 'off');
model.result.export('img1').set('zoomextents', 'on');
model.result.export('img1').set('fontsize', '18');
model.result.export('img1').set('colortheme', 'globaltheme');
model.result.export('img1').set('customcolor', [1 1 1]);
model.result.export('img1').set('background', 'color');
model.result.export('img1').set('gltfincludelines', 'on');
model.result.export('img1').set('title1d', 'on');
model.result.export('img1').set('legend1d', 'on');
model.result.export('img1').set('logo1d', 'on');
model.result.export('img1').set('options1d', 'on');
model.result.export('img1').set('title2d', 'on');
model.result.export('img1').set('legend2d', 'on');
model.result.export('img1').set('logo2d', 'off');
model.result.export('img1').set('options2d', 'on');
model.result.export('img1').set('title3d', 'on');
model.result.export('img1').set('legend3d', 'on');
model.result.export('img1').set('logo3d', 'on');
model.result.export('img1').set('options3d', 'off');
model.result.export('img1').set('axisorientation', 'on');
model.result.export('img1').set('grid', 'on');
model.result.export('img1').set('axes1d', 'on');
model.result.export('img1').set('axes2d', 'off');
model.result.export('img1').set('showgrid', 'on');
model.result.export('img1').set('target', 'file');
model.result.export('img1').set('qualitylevel', '92');
model.result.export('img1').set('qualityactive', 'off');
model.result.export('img1').set('imagetype', 'png');
model.result.export('img1').set('lockview', 'off');
model.result.export('img2').set('size', 'manualweb');
model.result.export('img2').set('unit', 'px');
model.result.export('img2').set('height', '480');
model.result.export('img2').set('width', '640');
model.result.export('img2').set('lockratio', 'off');
model.result.export('img2').set('resolution', '96');
model.result.export('img2').set('antialias', 'off');
model.result.export('img2').set('zoomextents', 'on');
model.result.export('img2').set('fontsize', '18');
model.result.export('img2').set('colortheme', 'globaltheme');
model.result.export('img2').set('customcolor', [1 1 1]);
model.result.export('img2').set('background', 'color');
model.result.export('img2').set('gltfincludelines', 'on');
model.result.export('img2').set('title1d', 'on');
model.result.export('img2').set('legend1d', 'on');
model.result.export('img2').set('logo1d', 'on');
model.result.export('img2').set('options1d', 'on');
model.result.export('img2').set('title2d', 'on');
model.result.export('img2').set('legend2d', 'on');
model.result.export('img2').set('logo2d', 'off');
model.result.export('img2').set('options2d', 'on');
model.result.export('img2').set('title3d', 'on');
model.result.export('img2').set('legend3d', 'on');
model.result.export('img2').set('logo3d', 'on');
model.result.export('img2').set('options3d', 'off');
model.result.export('img2').set('axisorientation', 'on');
model.result.export('img2').set('grid', 'on');
model.result.export('img2').set('axes1d', 'on');
model.result.export('img2').set('axes2d', 'off');
model.result.export('img2').set('showgrid', 'on');
model.result.export('img2').set('target', 'file');
model.result.export('img2').set('qualitylevel', '92');
model.result.export('img2').set('qualityactive', 'off');
model.result.export('img2').set('imagetype', 'png');
model.result.export('img2').set('lockview', 'off');

out = model;
